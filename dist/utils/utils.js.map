{"version":3,"file":"utils.js","names":["substitionDict","replaceSpecialCharacters","text","_initDict","char","pattern","RegExp","toString","replace","isNullOrUndefined","value","undefined","removeSpecialChars","removeWhiteSpace","trim","luhn10","sum","alt","num","i","length","parseInt","charAt","clone","originalObject","dupe","JSON","parse","stringify","toUpperCase","String"],"sources":["../../src/utils/utils.js"],"sourcesContent":["// import cardTypes from \"../utils/card-types\";\n\nvar substitionDict = null;\n\nexport default {\n  replaceSpecialCharacters(text) {\n    this._initDict();\n\n    for (const char in substitionDict) {\n      let pattern = new RegExp(char, \"g\");\n      text = text.toString().replace(pattern, substitionDict[char]);\n    }\n    return text;\n  },\n\n  isNullOrUndefined(value) {\n    return value === null || value === undefined;\n  },\n\n  removeSpecialChars(text) {\n    return text.toString().replace(/[^a-zA-Z 0-9]+/g, \"\");\n  },\n\n  removeWhiteSpace(text) {\n    if (!text) return \"\";\n    return text.toString().trim().replace(/\\s+/g, \"\");\n  },\n\n  luhn10(value) {\n    let sum = 0;\n    let alt = false;\n    let num;\n    let i = value.length - 1;\n\n    while (i >= 0) {\n      num = parseInt(value.charAt(i), 10);\n      if (alt) {\n        num *= 2;\n        if (num > 9) num = (num % 10) + 1;\n      }\n\n      alt = !alt;\n      sum += num;\n      i--;\n    }\n\n    return sum % 10 === 0;\n  },\n\n  clone(originalObject) {\n    let dupe;\n    if (!originalObject) return null;\n\n    dupe = JSON.parse(JSON.stringify(originalObject));\n    return dupe;\n  },\n\n  _initDict() {\n    substitionDict = [];\n    substitionDict[\"ã\"] = \"a\";\n    substitionDict[\"á\"] = \"a\";\n    substitionDict[\"â\"] = \"a\";\n    substitionDict[\"ä\"] = \"a\";\n    substitionDict[\"à\"] = \"a\";\n\n    substitionDict[\"é\"] = \"e\";\n    substitionDict[\"ê\"] = \"e\";\n    substitionDict[\"ë\"] = \"e\";\n    substitionDict[\"è\"] = \"e\";\n\n    substitionDict[\"í\"] = \"i\";\n    substitionDict[\"î\"] = \"i\";\n    substitionDict[\"ï\"] = \"i\";\n    substitionDict[\"ì\"] = \"i\";\n\n    substitionDict[\"õ\"] = \"o\";\n    substitionDict[\"ó\"] = \"o\";\n    substitionDict[\"ô\"] = \"o\";\n    substitionDict[\"ö\"] = \"o\";\n    substitionDict[\"ò\"] = \"o\";\n\n    substitionDict[\"ú\"] = \"u\";\n    substitionDict[\"û\"] = \"u\";\n    substitionDict[\"ü\"] = \"u\";\n    substitionDict[\"ù\"] = \"u\";\n\n    substitionDict[\"ç\"] = \"c\";\n\n    substitionDict[\"ñ\"] = \"n\";\n\n    for (const char in substitionDict) {\n      substitionDict[char.toUpperCase()] = String(substitionDict[char]).toUpperCase();\n    }\n  },\n};\n"],"mappings":"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"}