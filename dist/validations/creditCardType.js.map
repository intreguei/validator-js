{"version":3,"file":"creditCardType.js","names":["utils","matches","types","cardNames","VISA","MASTERCARD","AMERICAN_EXPRESS","DINERS_CLUB","DISCOVER","JCB","UNIONPAY","MAESTRO","ELO","MIR","HIPER","HIPERCARD","ORIGINAL_TEST_ORDER","testOrder","clone","findType","type","addMatchingCardsToResults","cardNumber","cardConfiguration","results","i","pattern","patternLength","clonedCardConfiguration","patterns","length","Array","isArray","String","matchStrength","push","get","forEach"],"sources":["../../src/validations/creditCardType.js"],"sourcesContent":["import utils from \"../utils/utils\";\nimport matches from \"../utils/matches\";\nimport types from \"../utils/card-types\";\n\nconst cardNames = {\n  VISA: \"visa\",\n  MASTERCARD: \"mastercard\",\n  AMERICAN_EXPRESS: \"american-express\",\n  DINERS_CLUB: \"diners-club\",\n  DISCOVER: \"discover\",\n  JCB: \"jcb\",\n  UNIONPAY: \"unionpay\",\n  MAESTRO: \"maestro\",\n  ELO: \"elo\",\n  MIR: \"mir\",\n  HIPER: \"hiper\",\n  HIPERCARD: \"hipercard\"\n};\n\nconst ORIGINAL_TEST_ORDER = [\n  cardNames.VISA,\n  cardNames.MASTERCARD,\n  cardNames.AMERICAN_EXPRESS,\n  cardNames.DINERS_CLUB,\n  cardNames.DISCOVER,\n  cardNames.JCB,\n  cardNames.UNIONPAY,\n  cardNames.MAESTRO,\n  cardNames.ELO,\n  cardNames.MIR,\n  cardNames.HIPER,\n  cardNames.HIPERCARD\n];\n\nconst testOrder = utils.clone(ORIGINAL_TEST_ORDER);\n\nexport default{\n\n  findType(type) {\n    return types[type];\n  },\n\n  addMatchingCardsToResults(cardNumber, cardConfiguration, results){\n    let i, pattern, patternLength, clonedCardConfiguration;\n\n    for (i = 0; i < cardConfiguration.patterns.length; i++) {\n      pattern = cardConfiguration.patterns[i];\n  \n      if (!matches.matches(cardNumber, pattern)) continue;\n\n      clonedCardConfiguration = utils.clone(cardConfiguration);\n      if (Array.isArray(pattern)) {\n        patternLength = String(pattern[0]).length;\n      } else {\n        patternLength = String(pattern).length;\n      }\n\n      if (cardNumber.length >= patternLength) clonedCardConfiguration.matchStrength = patternLength;\n      results.push(clonedCardConfiguration);\n      break;\n    }\n  },\n\n  get(cardNumber){\n    let results = [];\n\n    testOrder.forEach((type) => {\n      let cardConfiguration = this.findType(type);\n      this.addMatchingCardsToResults(cardNumber, cardConfiguration, results);\n    });\n\n    return results;\n  }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,gBAAgB;AAClC,OAAOC,OAAO,MAAM,kBAAkB;AACtC,OAAOC,KAAK,MAAM,qBAAqB;AAEvC,IAAMC,SAAS,GAAG;EAChBC,IAAI,EAAE,MAAM;EACZC,UAAU,EAAE,YAAY;EACxBC,gBAAgB,EAAE,kBAAkB;EACpCC,WAAW,EAAE,aAAa;EAC1BC,QAAQ,EAAE,UAAU;EACpBC,GAAG,EAAE,KAAK;EACVC,QAAQ,EAAE,UAAU;EACpBC,OAAO,EAAE,SAAS;EAClBC,GAAG,EAAE,KAAK;EACVC,GAAG,EAAE,KAAK;EACVC,KAAK,EAAE,OAAO;EACdC,SAAS,EAAE;AACb,CAAC;AAED,IAAMC,mBAAmB,GAAG,CAC1Bb,SAAS,CAACC,IAAI,EACdD,SAAS,CAACE,UAAU,EACpBF,SAAS,CAACG,gBAAgB,EAC1BH,SAAS,CAACI,WAAW,EACrBJ,SAAS,CAACK,QAAQ,EAClBL,SAAS,CAACM,GAAG,EACbN,SAAS,CAACO,QAAQ,EAClBP,SAAS,CAACQ,OAAO,EACjBR,SAAS,CAACS,GAAG,EACbT,SAAS,CAACU,GAAG,EACbV,SAAS,CAACW,KAAK,EACfX,SAAS,CAACY,SAAS,CACpB;AAED,IAAME,SAAS,GAAGjB,KAAK,CAACkB,KAAK,CAACF,mBAAmB,CAAC;AAElD,eAAc;EAEZG,QAAQA,CAACC,IAAI,EAAE;IACb,OAAOlB,KAAK,CAACkB,IAAI,CAAC;EACpB,CAAC;EAEDC,yBAAyBA,CAACC,UAAU,EAAEC,iBAAiB,EAAEC,OAAO,EAAC;IAC/D,IAAIC,CAAC,EAAEC,OAAO,EAAEC,aAAa,EAAEC,uBAAuB;IAEtD,KAAKH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,iBAAiB,CAACM,QAAQ,CAACC,MAAM,EAAEL,CAAC,EAAE,EAAE;MACtDC,OAAO,GAAGH,iBAAiB,CAACM,QAAQ,CAACJ,CAAC,CAAC;MAEvC,IAAI,CAACxB,OAAO,CAACA,OAAO,CAACqB,UAAU,EAAEI,OAAO,CAAC,EAAE;MAE3CE,uBAAuB,GAAG5B,KAAK,CAACkB,KAAK,CAACK,iBAAiB,CAAC;MACxD,IAAIQ,KAAK,CAACC,OAAO,CAACN,OAAO,CAAC,EAAE;QAC1BC,aAAa,GAAGM,MAAM,CAACP,OAAO,CAAC,CAAC,CAAC,CAAC,CAACI,MAAM;MAC3C,CAAC,MAAM;QACLH,aAAa,GAAGM,MAAM,CAACP,OAAO,CAAC,CAACI,MAAM;MACxC;MAEA,IAAIR,UAAU,CAACQ,MAAM,IAAIH,aAAa,EAAEC,uBAAuB,CAACM,aAAa,GAAGP,aAAa;MAC7FH,OAAO,CAACW,IAAI,CAACP,uBAAuB,CAAC;MACrC;IACF;EACF,CAAC;EAEDQ,GAAGA,CAACd,UAAU,EAAC;IACb,IAAIE,OAAO,GAAG,EAAE;IAEhBP,SAAS,CAACoB,OAAO,CAAEjB,IAAI,IAAK;MAC1B,IAAIG,iBAAiB,GAAG,IAAI,CAACJ,QAAQ,CAACC,IAAI,CAAC;MAC3C,IAAI,CAACC,yBAAyB,CAACC,UAAU,EAAEC,iBAAiB,EAAEC,OAAO,CAAC;IACxE,CAAC,CAAC;IAEF,OAAOA,OAAO;EAChB;AACF,CAAC"}